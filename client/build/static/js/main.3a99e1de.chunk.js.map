{"version":3,"sources":["components/NavigationBar.js","components/OrganizationPage.js","components/CardList.js","components/MapChart.js","components/Dashboard.js","components/DisasterDetails.js","components/AboutPage.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["NavigationBar","Navbar","color","light","expand","className","id","src","alt","NavbarBrand","href","Nav","navbar","NavItem","NavLink","OrganizationCard","org","this","props","organization","target","website","rel","Card","name","aria-label","CardImg","image","CardBody","CardTitle","CardText","info","React","Component","OrganizationList","organizationCards","organizations","map","key","CardList","disasters","useState","page","setPage","cards","data","forEach","disaster","push","country","numPages","length","start","end","updatedDisasters","slice","previousLabel","nextLabel","breakLabel","breakClassName","pageCount","marginPagesDisplayed","pageRangeDisplayed","forcePage","onPageChange","selected","containerClassName","subContainerClassName","activeClassName","initialPage","to","disasterType","MapChart","countries","setData","useEffect","countriesWithDisaster","countryName","toLowerCase","projectionConfig","rotate","scale","stroke","strokeWidth","geography","geographies","geo","hasDisaster","includes","properties","NAME_LONG","rsmKey","fill","Dashboard","setDisasters","setDisaster","areasWithDisasters","setAreas","dropdownOpen","setDropdownOpen","dropdownSelected","setDropdownSelected","a","getDisasters","result","fetchData","dropdownItems","DropdownItem","onClick","e","filter","textContent","Dropdown","isOpen","toggle","prevState","DropdownToggle","caret","DropdownMenu","fetch","then","res","json","disasterDescription","fields","colonIndex","indexOf","dashIndex","substring","slashIndex","addNewData","split","catch","err","console","log","DisasterDetails","param","match","params","articles","setArticles","getArticles","dangerouslySetInnerHTML","__html","text","profile","AboutContent","Footer","App","exact","path","component","ORGANIZATIONS","AboutPage","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3a99e1de.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar, NavbarBrand, Nav, NavItem, NavLink } from 'reactstrap';\n\nexport default function NavigationBar() {\n    return (\n        <Navbar color=\"white\" light expand=\"md\">\n          <div className='container'>\n            <img id=\"projectLogo\" src=\"./img/proj_logo.png\" alt=\"logo with red connection\"/>\n            <NavbarBrand href=\"/\">Disaster Live</NavbarBrand>\n            <Nav className=\"ml-auto\" navbar>\n              <NavItem>\n                <NavLink href=\"/about\">About</NavLink>\n              </NavItem>\n              <NavItem>\n                <NavLink href=\"/donate\">Donate</NavLink>\n              </NavItem>\n              {/* <NavItem>\n                <NavLink href=\"/signin\">Sign in</NavLink>\n              </NavItem> */}\n            </Nav>\n          </div>\n        </Navbar>\n    )\n}\n","import React from 'react';\nimport {Card, CardImg, CardText, CardBody,\n    CardTitle} from 'reactstrap';\n\nclass OrganizationCard extends React.Component {\n    render() {\n        let org = this.props.organization;\n        return(\n            <a target=\"_blank\" href={org.website} rel=\"noopener noreferrer\">\n                <Card id={org.name} className='org-card' aria-label={org.name+\" card: click to visit their website\"}> \n                    <CardImg src={org.image} alt={org.name + \" Logo\"}/>\n                    <CardBody>\n                        <CardTitle>{org.name}</CardTitle>\n                        <CardText>{org.info}</CardText>\n                    </CardBody>\n                </Card>\n            </a>\n\n        );\n    }\n}\n\nexport default class OrganizationList extends React.Component {\n    render() {\n        let organizationCards = this.props.organizations.map((organization)=>{\n            return <OrganizationCard key={organization.name} organization={organization}/>\n        })\n        return(\n            <div id='organization-list' className=\"container\" aria-label=\"list of organizations for donation\">\n                {organizationCards}\n            </div>\n        );\n    }\n}","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport ReactPaginate from 'react-paginate';\n\nexport default function CardList({ disasters }) {\n  const [page, setPage] = useState(0);\n\n  let cards = [];\n  for (let data of disasters) {\n    data.disasters.forEach(disaster => {\n      cards.push(<Card key={disaster.id} country={data.country} disaster={disaster} />);\n    });\n  }  \n\n  const cardsPerPage = 4;\n  let numPages = cards.length / cardsPerPage;\n  let start = cardsPerPage * page;\n  let end = start + cardsPerPage;\n  let updatedDisasters = [];\n  if (disasters.length > cardsPerPage) {\n    updatedDisasters = cards.slice(start, end);\n  } else {\n    updatedDisasters = cards;\n  }\n  \n  return (\n    <div className='card-list-container'>\n      <div id='card-container'>\n        {updatedDisasters}\n      </div>\n      <ReactPaginate\n        previousLabel={'<'}\n        nextLabel={'>'}\n        breakLabel={'...'}\n        breakClassName={'break-me'}\n        pageCount={numPages}\n        marginPagesDisplayed={1}\n        pageRangeDisplayed={1}\n        forcePage={page}\n        onPageChange={(data) => {setPage(data.selected)}}\n        containerClassName={'pagination'}\n        subContainerClassName={'pages pagination'}\n        activeClassName={'active'}\n        initialPage={page}\n      />\n    </div>\n  );\n}\n\nexport function Card({ country, disaster }) {\n  return(\n    <Link to={'/articles/' + country + '-' + disaster.disasterType + '-' + disaster.id}>\n      <div className='card' aria-label={disaster.disasterType + 'in' + country}>\n        <h1>{disaster.disasterType}</h1>\n        <h2>{country}</h2>\n      </div>\n    </Link>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport {\n  ComposableMap,\n  Geographies,\n  Geography,\n  Sphere,\n  Graticule\n} from \"react-simple-maps\";\n\nconst geoUrl =\n  \"https://raw.githubusercontent.com/zcreativelabs/react-simple-maps/master/topojson-maps/world-110m.json\";\n\nconst MapChart = ({ countries }) => {\n  const [data, setData] = useState([]);\n\n  useEffect(() => {\n    let countriesWithDisaster = countries;\n    countriesWithDisaster = countries.map(country => {\n      let countryName = country.toLowerCase();\n      if (countryName === 'republic of congo') {\n        return 'republic of the congo';\n      } else if (countryName === 'dr congo') {\n        return 'democratic republic of the congo'\n      }\n\n      return countryName;\n    });\n    \n    setData(countriesWithDisaster);\n  }, [countries]);\n\n  return (\n    <ComposableMap\n      projectionConfig={{\n        rotate: [-10, 0, 0],\n        scale: 147\n      }}\n    >\n      <Sphere stroke=\"#E4E5E6\" strokeWidth={0.5} />\n      <Graticule stroke=\"#E4E5E6\" strokeWidth={0.5} />\n        <Geographies geography={geoUrl}>\n          {({ geographies }) =>\n            geographies.map(geo => {\n              let hasDisaster = data.includes(\n                geo.properties.NAME_LONG.toLowerCase()\n              );\n              return (\n                <Geography\n                  key={geo.rsmKey}\n                  geography={geo}\n                  stroke=\"#FFF\"\n                  fill={hasDisaster ? \"#ff6961\" : \"#D6D6DA\"}\n                />\n              );\n            })\n          }\n        </Geographies>\n      )}\n    </ComposableMap>\n  );\n};\n\nexport default MapChart;\n","import React, { useState, useEffect } from 'react';\nimport { Dropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport CardList from './CardList';\nimport MapChart from \"./MapChart\";\nconst DISASTER_API = 'https://api.reliefweb.int/v1/disasters?appname=project2&limit=1000&filter[field]=status&filter[value]=current';\n\nexport default function Dashboard() {\n  const [disasters, setDisasters] = useState([]);\n  const [disaster, setDisaster] = useState([]);\n  const [areasWithDisasters, setAreas] = useState([]);\n  const [dropdownOpen, setDropdownOpen] = useState(false);\n  const [dropdownSelected, setDropdownSelected] = useState('World');\n  const toggle = () => setDropdownOpen(prevState => !prevState);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      let result = await getDisasters();\n \n      let countries = result.map(disaster => disaster.country);\n      setAreas(countries);\n      setDisasters(result);\n      setDisaster(result);\n    };\n\n    fetchData();\n  }, []);\n\n  let dropdownItems = areasWithDisasters.map(country => <DropdownItem key={country} onClick={(e) => {\n    let disaster = disasters.filter(disaster => disaster.country === e.target.textContent);\n    setDisaster(disaster);\n    setDropdownSelected(e.target.textContent);\n  }}>{country}</DropdownItem>);\n\n  return (\n    <div className='container center'>\n      <MapChart countries={areasWithDisasters} />\n      \n      <Dropdown isOpen={dropdownOpen} toggle={toggle}>\n        <DropdownToggle caret>\n          {dropdownSelected}\n        </DropdownToggle>\n\n        <DropdownMenu>\n          <DropdownItem onClick={() => {\n            setDisaster(disasters)\n            setDropdownSelected('World');\n            }}>World</DropdownItem>\n          {dropdownItems}\n        </DropdownMenu>\n      </Dropdown>\n\n      <CardList disasters={disaster} />\n    </div>\n  )\n}\n\n// Fetch and organize data from the Disaster API.\nfunction getDisasters() {\n  let disasters = fetch(DISASTER_API)\n    .then(res => res.json())\n    .then(data => {\n      let disasters = [];\n\n      data.data.forEach(disaster => {\n        let disasterDescription = disaster.fields.name;\n        let id = disaster.id;\n        let colonIndex = disasterDescription.indexOf(':');\n        let dashIndex = disasterDescription.indexOf('-');\n        if (colonIndex !== -1) {\n          let country = disasterDescription.substring(0, colonIndex);\n          let slashIndex = country.indexOf('/');\n          let disasterType = disasterDescription.substring(colonIndex+2, dashIndex-1);\n          if (slashIndex === -1) {\n            if (disasters.length === 0) {\n              disasters.push({country, disasters: [{disasterType, id}]});\n            } else {\n              let addNewData = true;\n              disasters.forEach(data => {\n                if (data.country === country) {\n                  data.disasters.push({disasterType, id});\n                  addNewData = false;\n                }\n              });\n\n              if (addNewData) {\n                disasters.push({country, disasters: [{disasterType, id}]});\n              }\n            }\n          } else {\n            let seperateCountries = country.split('/');\n            seperateCountries.forEach(country => {\n              if (disasters.length === 0) {\n                disasters.push({country, disasters: [{disasterType, id}]});\n              } else {\n                let addNewData = true;\n                disasters.forEach(data => {\n                  if (data.country === country) {\n                    data.disasters.push({disasterType, id});\n                    addNewData = false;\n                  }\n                });\n  \n                if (addNewData) {\n                  disasters.push({country, disasters: [{disasterType, id}]});\n                }\n              }\n            });\n          }\n        }\n      });\n\n      return disasters;\n  })\n  .catch((err) => console.log(err));\n\n  return disasters;\n}","import React, { useState, useEffect } from 'react'\n\nexport default function DisasterDetails(props) {\n  let param = props.match.params.data;\n  const country = param.substring(0, param.indexOf('-'));\n  param = param.substring(param.indexOf('-') + 1, param.length);\n  const disaster =  param.substring(0, param.indexOf('-'));\n  param = param.substring(param.indexOf('-') + 1, param.length);\n  const id = param;\n  const [articles, setArticles] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await getArticles(id);\n      setArticles(result);\n    };\n\n    fetchData();\n  });\n\n  return (\n    <div id='disaster-details' className='container'>\n      <h1>{disaster}</h1>\n      <h3>{country}</h3>\n      <section dangerouslySetInnerHTML={{__html: articles}}></section>\n    </div>\n  )\n}\n\nfunction getArticles(id) {\n  let text = fetch(\"https://api.reliefweb.int/v1/disasters/\" + id)\n    .then(res => res.json())\n    .then(data => {\n      text = data.data[0].fields.profile['overview-html'];\n      return text;\n    })\n    .catch(err => console.log(err));\n\n    return text;\n}\n","import React from 'react';\n\nexport default class AboutContent extends React.Component {\n    render(){\n        return(\n            <div className=\"container containerText\">\n                <section>\n                    <h1>About</h1>\n                    <div className=\"img-container\">\n                        <img className=\"map-img\" src=\"./img/simple_map.png\" alt=\"world map with red dots\"/>\n                    </div>\n                    <p>Disaster Live is a web application designed by University of Washington students to inform \n                        users of world disasters. We created this project as a source of information for users who currently reside \n                        in disaster-struck areas or for those travellers planning ahead.</p>\n                    <p>The Disaster Live webpage contains information on ongoing worldwide disaster, disaster-related news, \n                        and global disaster relief organizations. Users may find relevant and current information by using the drop-down menus \n                        on the main landing page.</p>\n                    <div className=\"img-container\">\n                        <img className=\"donation-webpage\" src=\"./img/donationpage.png\" alt=\"donation webpage\"/>\n                    </div>\n                    <p>For those who wish to support the organizations listed, the user simply needs to click the \"donate\" menu from the landing page. \n                        From there, the UI will guide them as they select which organization they wish to support. With the simplicity and user-friendly interface of Disaster Live,\n                         users have an all-in-one solution for researching and supporting their favorite organizations.</p>\n                    {/* need to edit later */}\n                    <h1>About Team</h1>\n                    <p>Eric Kim, Jisu Kim, Sharon Lin, and Xi Yan</p>\n                </section>\n            </div>\n        )\n    }\n}","import React from 'react'\n\nexport default function Footer() {\n  return (\n    <footer>\n      <p>© 2020 Eric Kim, Sharon Lin, Jisu Kim, Xi Yan</p>\n      <p>Disaster API: https://reliefweb.int/help/api</p>\n      <p>Organization Details from Wikipedia</p>\n    </footer>\n  )\n}\n","import React from 'react';\nimport NavigationBar from './components/NavigationBar';\nimport OrganizationList from './components/OrganizationPage';\nimport ORGANIZATIONS from './assets/organizations.json';\nimport Dashboard from './components/Dashboard';\nimport DisasterDetails from './components/DisasterDetails';\nimport AboutPage from './components/AboutPage'\nimport { Switch, Route } from 'react-router-dom';\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <NavigationBar />\n      <Switch>\n        <Route exact path='/' component={Dashboard} />\n        <Route path='/articles/:data' component={DisasterDetails} />\n        <Route path='/donate'>\n          <OrganizationList organizations = {ORGANIZATIONS} />\n        </Route>\n        <Route path='/about' component={AboutPage}/>\n      </Switch>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}